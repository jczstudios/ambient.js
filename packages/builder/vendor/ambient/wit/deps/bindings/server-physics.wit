interface server-physics {
    use types.{entity-id, vec3, mat4}

    record character-collision {
        side: bool,
        up: bool,
        down: bool,
    }

    add-force: func(entity: entity-id, force: vec3)
    add-impulse: func(entity: entity-id, impulse: vec3)
    add-radial-impulse: func(position: vec3, impulse: float32, radius: float32, falloff-radius: option<float32>)
    add-force-at-position: func(entity: entity-id, force: vec3, position: vec3)
    add-impulse-at-position: func(entity: entity-id, impulse: vec3, position: vec3)
    get-velocity-at-position: func(entity: entity-id, position: vec3) -> vec3
    set-gravity: func(gravity: vec3)
    unfreeze: func(entity: entity-id)
    freeze: func(entity: entity-id)
    start-motor: func(entity: entity-id, velocity: float32)
    stop-motor: func(entity: entity-id)
    create-revolute-joint: func(actor0: entity-id, transform0: mat4, actor1: entity-id, transform1: mat4)
    raycast-first: func(origin: vec3, direction: vec3) -> option<tuple<entity-id, float32>>
    raycast: func(origin: vec3, direction: vec3) -> list<tuple<entity-id, float32>>
    move-character: func(entity: entity-id, displacement: vec3, min-dist: float32, elapsed-time: float32) -> character-collision
    set-character-position: func(entity: entity-id, position: vec3)
    set-character-foot-position: func(entity: entity-id, position: vec3)
}

