interface component {
    use types.{entity-id, mat4, quat, vec2, vec3, vec4, uvec2, uvec3, uvec4, ivec2, ivec3, ivec4, duration, empty}
    use client-mesh.{handle as procedural-mesh-handle}
    use client-texture.{handle as procedural-texture-handle}
    use client-sampler.{handle as procedural-sampler-handle}
    use client-material.{handle as procedural-material-handle}

    variant vec-value {
        type-empty(list<empty>),
        type-bool(list<bool>),
        type-entity-id(list<entity-id>),
        type-f32(list<float32>),
        type-f64(list<float64>),
        type-mat4(list<mat4>),
        type-quat(list<quat>),
        type-string(list<string>),
        type-u8(list<u8>),
        type-u16(list<u16>),
        type-u32(list<u32>),
        type-u64(list<u64>),
        type-i8(list<s8>),
        type-i16(list<s16>),
        type-i32(list<s32>),
        type-i64(list<s64>),
        type-vec2(list<vec2>),
        type-vec3(list<vec3>),
        type-vec4(list<vec4>),
        type-uvec2(list<uvec2>),
        type-uvec3(list<uvec3>),
        type-uvec4(list<uvec4>),
        type-ivec2(list<ivec2>),
        type-ivec3(list<ivec3>),
        type-ivec4(list<ivec4>),
        type-duration(list<duration>),
        type-procedural-mesh-handle(list<procedural-mesh-handle>),
        type-procedural-texture-handle(list<procedural-texture-handle>),
        type-procedural-sampler-handle(list<procedural-sampler-handle>),
        type-procedural-material-handle(list<procedural-material-handle>),
    }

    variant option-value {
        type-empty(option<empty>),
        type-bool(option<bool>),
        type-entity-id(option<entity-id>),
        type-f32(option<float32>),
        type-f64(option<float64>),
        type-mat4(option<mat4>),
        type-quat(option<quat>),
        type-string(option<string>),
        type-u8(option<u8>),
        type-u16(option<u16>),
        type-u32(option<u32>),
        type-u64(option<u64>),
        type-i8(option<s8>),
        type-i16(option<s16>),
        type-i32(option<s32>),
        type-i64(option<s64>),
        type-vec2(option<vec2>),
        type-vec3(option<vec3>),
        type-vec4(option<vec4>),
        type-uvec2(option<uvec2>),
        type-uvec3(option<uvec3>),
        type-uvec4(option<uvec4>),
        type-ivec2(option<ivec2>),
        type-ivec3(option<ivec3>),
        type-ivec4(option<ivec4>),
        type-duration(option<duration>),
        type-procedural-mesh-handle(option<procedural-mesh-handle>),
        type-procedural-texture-handle(option<procedural-texture-handle>),
        type-procedural-sampler-handle(option<procedural-sampler-handle>),
        type-procedural-material-handle(option<procedural-material-handle>),
    }

    variant value {
        type-empty(empty),
        type-bool(bool),
        type-entity-id(entity-id),
        type-f32(float32),
        type-f64(float64),
        type-mat4(mat4),
        type-quat(quat),
        type-string(string),
        type-u8(u8),
        type-u16(u16),
        type-u32(u32),
        type-u64(u64),
        type-i8(s8),
        type-i16(s16),
        type-i32(s32),
        type-i64(s64),
        type-vec2(vec2),
        type-vec3(vec3),
        type-vec4(vec4),
        type-uvec2(uvec2),
        type-uvec3(uvec3),
        type-uvec4(uvec4),
        type-ivec2(ivec2),
        type-ivec3(ivec3),
        type-ivec4(ivec4),
        type-duration(duration),
        type-procedural-mesh-handle(procedural-mesh-handle),
        type-procedural-texture-handle(procedural-texture-handle),
        type-procedural-sampler-handle(procedural-sampler-handle),
        type-procedural-material-handle(procedural-material-handle),
        type-vec(vec-value),
        type-option(option-value),
    }

    // For some reason, using the component-index alias breaks bindgen for the web client.
    // Where you see u32 below, pretend it says `component-index` instead.
    type component-index = u32
    type entity = list<tuple<u32, value>>
    get-index: func(id: string) -> option<u32>
    get-id: func(index: u32) -> option<string>

    get-component: func(entity: entity-id, index: u32) -> option<value>
    get-components: func(entity: entity-id, indices: list<u32>) -> entity
    get-all-components: func(entity: entity-id) -> entity

    add-component: func(entity: entity-id, index: u32, value: value)
    add-components: func(entity: entity-id, data: entity)

    set-component: func(entity: entity-id, index: u32, value: value)
    set-components: func(entity: entity-id, data: entity)

    has-component: func(entity: entity-id, index: u32) -> bool
    has-components: func(entity: entity-id, indices: list<u32>) -> bool

    remove-component: func(entity: entity-id, index: u32)
    remove-components: func(entity: entity-id, indices: list<u32>)

    record query-build {
        components: list<u32>,
        includes: list<u32>,
        excludes: list<u32>,
        changed: list<u32>,
    }

    enum query-event {
        frame,
        spawn,
        despawn
    }

    query: func(q: query-build, t: query-event) -> u64
    query-eval: func(q: u64) -> list<tuple<entity-id, list<value>>>
}
